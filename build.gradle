import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption
import java.util.zip.ZipEntry
import java.util.zip.ZipFile

plugins {
    id "com.jfrog.bintray" version "1.7.1"
    id 'me.tatarka.retrolambda' version '3.3.0'
}

ext.pluginGroup = 'org.yunshanmc.plugin'
ext.pluginName = 'Yun_Shan-Common-Library'
ext.pluginVersion = '1.0.0.18'

group = pluginGroup
version = pluginVersion

apply plugin: 'java'
apply plugin: 'maven-publish'

repositories {
    jcenter()

    maven {
        name = 'Spigot'
        url = 'https://hub.spigotmc.org/nexus/content/groups/public/'
    }

    maven {
        name = 'Guava'
        url = 'https://mvnrepository.com/artifact/com.google.guava/guava'
    }
}

// 源码版本
sourceCompatibility = 1.8
// 编译目标版本
targetCompatibility = 1.8

retrolambda {
    javaVersion JavaVersion.VERSION_1_7
}

// 源码位置定义
sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['resources']
        }
    }

    test {
        java {
            srcDirs = ['test']
        }
    }
}

javadoc {
    options {// javadoc使用utf-8编码
        encoding = 'utf-8'
        docEncoding = 'utf-8'
        charSet = 'utf-8'
    }
}

compileJava {
    options.encoding = 'utf-8' // 源码为utf-8编码
}

compileTestJava {
    options.encoding = 'utf-8' // 源码为utf-8编码
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // Spigot API
    compile('org.spigotmc:spigot-api:1.8.8-R0.1-SNAPSHOT') { transitive = false }
    // Guava
    compile 'com.google.guava:guava:11.0'
    // https://mvnrepository.com/artifact/org.jsoup/jsoup
    compile 'org.jsoup:jsoup:1.9.2'

    // https://mvnrepository.com/artifact/org.jsoup/jsoup
    runtime 'org.jsoup:jsoup:1.9.2'

    // JUnit Test
    testCompile 'junit:junit:4.12'
}

task fetchClasses {
    File dir = file('build/classes/dependencies')

    inputs.property('depend', configurations.runtime)
    outputs.dir dir

    doLast {
        dir.mkdirs()
        configurations.runtime.forEach { file ->
            try {
                ZipFile zip = new ZipFile(file);
                for (ZipEntry entry : zip.entries()) {
                    if (entry.getName().endsWith(".class")) {
                        File f = new File(dir, entry.getName())
                        f.getParentFile().mkdirs()
                        Files.copy(zip.getInputStream(entry), Paths.get(f.toURI()), StandardCopyOption.REPLACE_EXISTING)
                    }
                }
            } catch (Throwable t) {
                t.printStackTrace();
            }
        }
    }
}

classes.finalizedBy fetchClasses

processResources {
    filter {line -> line.replace("\${pluginVersion}", pluginVersion).replace("\${pluginName}", "YCL")}
}

jar {
    into('') {
        from fileTree('build/classes/dependencies')
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
    from javadoc.outputs
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier "sources"
            }

            artifact javadocJar {
                classifier "javadoc"
            }
        }
    }

    repositories {
        maven {
            url "https://dl.bintray.com/yun-shan/BukkitPlugin"
        }
    }
}

bintray {
    user = System.getProperty("bintrayUserName", "")
    key = System.getProperty("bintrayApiKey", "")
    publications = ['mavenJava']
    pkg {
        repo = 'BukkitPlugin'
        name = pluginName
    }
}
